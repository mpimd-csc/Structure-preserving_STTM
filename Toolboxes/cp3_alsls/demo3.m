% demo 3 to test cp3_alsls algorithm.
% The purpose of this demo is to observe the different convergence curves for 
% different line search method and different initializations.
% The starting point is generated with cp3_init.m function. The first starting point
% is generated by the direct trilinear decomposition (dtld) and the others are random.

clear all
close all
clc

%**********************************************
%--- Choose PARAMETERS of the DEMO
%**********************************************
%--- data parameters
    data_type='complex';       % choose 'real' or 'complex' to select the kind of data to generate
    I=9;                      % Dimensions  of the tensor
    J=10;
    K=8;           
    R=12;                     % Rank of the tensor
    SNR=40;                   % SNR [dB], choose SNR=inf for a noise-free model
    condA=40;                 % Impose a condition number on the loading matrices:
    condB=40;                 % the highest these values, the more likely swamps will appear 
    condC=40;
%--- Algorithm parameters
     comp='on';          % ='on' or ='off' to perform dimensionality reduction or not
    Tol1=1e-6;          % Tolerance of ALS 
    MaxIt1=5000;        % Max number of iterations 
    Tol2=1e-5;          % tolerance in refinement stage (after decompression if it was used)
    MaxIt2=500;         % Max number of iterations in refinement stage
    Ninit=4;            % Number of initializations (the first one being dtld if possible)
   
%***************************************************
%---- Build Loading matrices and observed tensor-----
%**************************************************** 
    if strcmp(data_type,'real')==1
        A=randn(I,R);B=randn(J,R);C=randn(K,R);
    elseif strcmp(data_type,'complex')==1
        A=randn(I,R)+j*randn(I,R);B=randn(J,R)+j*randn(J,R);C=randn(K,R)+j*randn(K,R);
    end
   
    % Now impose a condition number on the matrices
    [Ua,Sa,Va]=svd(A,0);
    [Ub,Sb,Vb]=svd(B,0);
    [Uc,Sc,Vc]=svd(C,0);
    Sa(1:min(I,R),1:min(I,R))=diag(linspace(condA,1,min(I,R)));   % change singular values (linearly spaced new values)
    Sb(1:min(J,R),1:min(J,R))=diag(linspace(condB,1,min(J,R)));   % change singular values (linearly spaced new values)
    Sc(1:min(K,R),1:min(K,R))=diag(linspace(condC,1,min(K,R)));   % change singular values (linearly spaced new values)
    A=Ua*Sa*Va';
    B=Ub*Sb*Vb';
    C=Uc*Sc*Vc';
    
    % Create observed tensor that follows PARAFAC model
    X=zeros(I,J,K);
    for k=1:K
        X(:,:,k)=A*diag(C(k,:))*B.';
    end

    % Add noise 
    if strcmp(data_type,'real')==1
        Noise_tens=randn(I,J,K);
    elseif strcmp(data_type,'complex')==1
        Noise_tens=randn(I,J,K)+j*randn(I,J,K);
    end
    sigma=(10^(-SNR/20))*(norm(reshape(X,J*I,K),'fro')/norm(reshape(Noise_tens,J*I,K),'fro'));
    X=X+sigma*Noise_tens;

%--------------------------------------------------------------------------------------------------------------
% COMPUTE THE CP3 decomposition of X
%--------------------------------------------------------------------------------------------------------------
% Notes: 
% 1- The output phi_vec is a vector that holds the evolution of phi across all
%    iterations (Evolution of phi to the compressed model if compression is on)
% 2- The output phi is the final value of phi, after several refinement iterations in compressed if comp='on'
% 3- The Outputs are the estimates obtained for the BEST initialization only
% 4- To use with all default parameters just call:  [A_est,B_est,C_est]=cp3_alsls(X,R);
%-------------------------------------------------------------------------------------------------------------
for ninit=1:Ninit
    
    % generate matrices to initialize (note that cp_init is included in cp3als file such that if A_init, B_init and 
    % C_init are not given as input arguments, cp3als will generate starting points by himself)
    if ninit==1
      [A_init,B_init,C_init]=cp3_init(X,R,'dtld');     % do init by dtld (ESPRIT like)
    else
      [A_init,B_init,C_init]=cp3_init(X,R,'random');  % force random init (because the init by dtld was eventually done before)
    end
       
    disp('------------------------------------------------------------')
    disp(['---------- Decomposition for initialization ',num2str(ninit)])
    disp('------------------------------------------------------------')
    %-----------------------------------------------------
    %  COMPUTE THE DECOMPOSITION for this initialization
    %-----------------------------------------------------    
    disp('Algorithm 1: als without line search (als)')
    [A_est,B_est,C_est,phi,it1,it2,phi_als]=cp3_alsls(X,R,'none',comp,Tol1,MaxIt1,Tol2,MaxIt2,Ninit,A_init,B_init,C_init);
    [temp,temp,temp,err_A]=solve_perm_scale(A_est,A);
    [temp,temp,temp,err_B]=solve_perm_scale(B_est,B);
    [temp,temp,temp,err_C]=solve_perm_scale(C_est,C);
    disp(['Final Fit:        ',num2str(phi)])
    disp(['err on A:         ',num2str(err_A)])
    disp(['err on B:         ',num2str(err_B)])
    disp(['err on C:         ',num2str(err_C)])
    disp(['Iterations 1:     ',num2str(it1)])
    disp(['Iterations 2:     ',num2str(it2)])
    
    disp('Algorithm 2: als with line search proposed by Harshman (als+lsh)')
    [A_est,B_est,C_est,phi,it1,it2,phi_lsh]=cp3_alsls(X,R,'lsh',comp,Tol1,MaxIt1,Tol2,MaxIt2,Ninit,A_init,B_init,C_init);
    [temp,temp,temp,err_A]=solve_perm_scale(A_est,A);
    [temp,temp,temp,err_B]=solve_perm_scale(B_est,B);
    [temp,temp,temp,err_C]=solve_perm_scale(C_est,C);
    disp(['Final Fit:        ',num2str(phi)])
    disp(['err on A:         ',num2str(err_A)])
    disp(['err on B:         ',num2str(err_B)])
    disp(['err on C:         ',num2str(err_C)])
    disp(['Iterations 1:     ',num2str(it1)])
    disp(['Iterations 2:     ',num2str(it2)])
    
    disp('Algorithm 3: als with line search proposed by Bro (als+lsb)')
    [A_est,B_est,C_est,phi,it1,it2,phi_lsb]=cp3_alsls(X,R,'lsb',comp,Tol1,MaxIt1,Tol2,MaxIt2,Ninit,A_init,B_init,C_init);
    [temp,temp,temp,err_A]=solve_perm_scale(A_est,A);
    [temp,temp,temp,err_B]=solve_perm_scale(B_est,B);
    [temp,temp,temp,err_C]=solve_perm_scale(C_est,C);
    disp(['Final Fit:        ',num2str(phi)])
    disp(['err on A:         ',num2str(err_A)])
    disp(['err on B:         ',num2str(err_B)])
    disp(['err on C:         ',num2str(err_C)])
    disp(['Iterations 1:     ',num2str(it1)])
    disp(['Iterations 2:     ',num2str(it2)])
    
    disp('Algorithm 4: als with exact line search and real step (als+elsr)')
    [A_est,B_est,C_est,phi,it1,it2,phi_elsr]=cp3_alsls(X,R,'elsr',comp,Tol1,MaxIt1,Tol2,MaxIt2,Ninit,A_init,B_init,C_init);
    [temp,temp,temp,err_A]=solve_perm_scale(A_est,A);
    [temp,temp,temp,err_B]=solve_perm_scale(B_est,B);
    [temp,temp,temp,err_C]=solve_perm_scale(C_est,C);
    disp(['Final Fit:        ',num2str(phi)])
    disp(['err on A:         ',num2str(err_A)])
    disp(['err on B:         ',num2str(err_B)])
    disp(['err on C:         ',num2str(err_C)])
    disp(['Iterations 1:     ',num2str(it1)])
    disp(['Iterations 2:     ',num2str(it2)])
    
    disp('Algorithm 5: als with exact line search and complex step (als+elsc)')
    [A_est,B_est,C_est,phi,it1,it2,phi_elsc]=cp3_alsls(X,R,'elsc',comp,Tol1,MaxIt1,Tol2,MaxIt2,Ninit,A_init,B_init,C_init);
    [temp,temp,temp,err_A]=solve_perm_scale(A_est,A);
    [temp,temp,temp,err_B]=solve_perm_scale(B_est,B);
    [temp,temp,temp,err_C]=solve_perm_scale(C_est,C);
    disp(['Final Fit:        ',num2str(phi)])
    disp(['err on A:         ',num2str(err_A)])
    disp(['err on B:         ',num2str(err_B)])
    disp(['err on C:         ',num2str(err_C)])
    disp(['Iterations 1:     ',num2str(it1)])
    disp(['Iterations 2:     ',num2str(it2)])
    
    
    figure
    loglog(phi_als,'b','LineWidth',2);hold on;
    loglog(phi_lsh,'y','LineWidth',2);
    loglog(phi_lsb,'r','LineWidth',2);
    loglog(phi_elsr,'m','LineWidth',2);
    loglog(phi_elsc,'c','LineWidth',2);
    xlabel('Iterations')
    ylabel('phi')
    title(['Evolution of phi for initialization ',num2str(ninit)])
    legend('als','als+lsh','als+lsb','als+elsr','als+elsc')

end